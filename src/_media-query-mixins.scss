@charset "UTF-8";
@import './grid-breakpoints';
// other values needed here...
/* stylelint-disable unit-whitelist, block-no-empty */


//
// Creates a list of static expressions or media types
//
// @example scss - Creates a single media type (screen)
//  $mediaExpressions: ('screen': 'screen');
//
// @example scss - Creates a static expression with logical disjunction (OR operator)
//  $mediaExpressions: (
//    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'
//  );
//
$mediaExpressions: (
  'screen': 'screen',
  'print': 'print',
  'handheld': 'handheld',
  'landscape': '(orientation: landscape)',
  'portrait': '(orientation: portrait)',
  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',
  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'
) !default;


//
// List of default breakpoints
//
$breakpointXs: 360px;
$breakpointSm: 578px;
$breakpointMd: 768px;
$breakpointLg: 1024px;
$breakpointXl: 1280px;
$breakpointXxl: 1440px;

$breakpoints: (
  'xs': $breakpointXs,
  'sm': $breakpointSm,
  'md': $breakpointMd,
  'lg': $breakpointLg,
  'xl': $breakpointXl,
  'xxl': $breakpointXxl,
  'gridXs': $gridBreakpointXs,
  'gridSm': $gridBreakpointSm,
  'gridMd': $gridBreakpointMd,
  'gridLg': $gridBreakpointLg,
) !default;

//
// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals
//
// @example scss - Interval for pixels is defined as `1` by default
//  @include media('>rem-size(128)') {}
//
//  /* Generates: */
//  @media (min-width: rem-size(129)) {}
//
// @example scss - Interval for ems is defined as `0.01` by default
//  @include media('>20em') {}
//
//  /* Generates: */
//  @media (min-width: 20.01em) {}
//
// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`
//  @include media('>2.0rem') {}
//
//  /* Generates: */
//  @media (min-width: 2.1rem) {}
//
$unitIntervals: (
  'px': 1,
  'em': .01,
  'rem': .1,
  '': 0
) !default;
//
// Defines whether support for media queries is available, useful for creating separate stylesheets
// for browsers that don't support media queries.
//
// @example scss - Disables support for media queries
//  $imMediaSupport: false;
//  @include media('>=tablet') {
//    .foo {
//      color: tomato;
//    }
//  }
//
//  /* Generates: */
//  .foo {
//    color: tomato;
//  }
//
$imMediaSupport: true !default;

//
// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or
// intercept the breakpoint will be displayed, any others will be ignored.
//
// @example scss - This media query will show because it intercepts the static breakpoint
//  $imMediaSupport: false;
//  $imNoMediaBreakpoint: 'desktop';
//  @include media('>=tablet') {
//    .foo {
//      color: tomato;
//    }
//  }
//
//  /* Generates: */
//  .foo {
//    color: tomato;
//  }
//
// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint
//  $imMediaSupport: false;
//  $imNoMediaBreakpoint: 'tablet';
//  @include media('>=desktop') {
//    .foo {
//      color: tomato;
//    }
//  }
//
//  /* No output */
//
$imNoMediaBreakpoint: 'desktop' !default;

//
// Selects which media expressions are allowed in an expression for it to be used when media queries
// are not supported.
//
// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions
//  $imMediaSupport: false;
//  $imNoMediaBreakpoint: 'desktop';
//  $imNoMediaExpressions: ('screen');
//  @include media('>=tablet', 'screen') {
//    .foo {
//      color: tomato;
//    }
//  }
//
//   /* Generates: */
//   .foo {
//     color: tomato;
//   }
//
// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted
//  $imMediaSupport: false;
//  $imNoMediaBreakpoint: 'desktop';
//  $imNoMediaExpressions: ('screen');
//  @include media('>=tablet', 'retina2x') {
//    .foo {
//      color: tomato;
//    }
//  }
//
//  /* No output */
//
$imNoMediaExpressions: ('screen', 'portrait', 'landscape') !default;

//
// Cross-engine logging engine
// @author Hugo Giraudel
// @access private
//


//
// Log a message either with `@error` if supported
// else with `@warn`, using `feature-exists('at-error')`
// to detect support.
//
// @param {String} $message - Message to log
//
@function log($message) {
  @if feature-exists('at-error') {
    @error $message;
  }
  @else {
    @warn $message;
    $noop: noop();
  }

  @return $message;
}


//
// Wrapper mixin for the log function so it can be used with a more friendly
// API than `@if log('..') {}` or `$noop: log('..')`. Basically, use the function
// within functions because it is not possible to include a mixin in a function
// and use the mixin everywhere else because it's much more elegant.
//
// @param {String} $message - Message to log
//
@mixin log($message) {
  @if log($message) {}
}


//
// Function with no `@return` called next to `@warn` in Sass 3.3
// to trigger a compiling error and stop the process.
//
@function noop() {}

//
// Determines whether a list of conditions is intercepted by the static breakpoint.
//
// @param {Arglist}   $conditions  - Media query conditions
//
// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint
//
@function im-intercepts-static-breakpoint($conditions...) {
  $noMediaBreakpointValue: map-get($breakpoints, $imNoMediaBreakpoint);

  @if not $noMediaBreakpointValue {
    @if log('`#{$imNoMediaBreakpoint}` is not a valid breakpoint.') {}
  }

  @each $condition in $conditions {
    @if not map-has-key($mediaExpressions, $condition) {
      $operator: get-expression-operator($condition);
      $prefix: get-expression-prefix($operator);
      $value: get-expression-value($condition, $operator);
      @if ($prefix == 'max' and $value <= $noMediaBreakpointValue) or
        ($prefix == 'min' and $value > $noMediaBreakpointValue) {
        @return false;
      }
    }
    @else if not index($imNoMediaExpressions, $condition) {
      @return false;
    }
  }

  @return true;
}


//
// Get operator of an expression
//
// @param {String} $expression - Expression to extract operator from
//
// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`
//
@function get-expression-operator($expression) {
  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {
    @if str-index($expression, $operator) {
      @return $operator;
    }
  }

  // It is not possible to include a mixin inside a function, so we have to
  // rely on the `log(..)` function rather than the `log(..)` mixin. Because
  // functions cannot be called anywhere in Sass, we need to hack the call in
  // a dummy variable, such as `$noop`. If anybody ever raise a scoping issue with
  // Sass 3.3, change this line in `@if log(..) {}` instead. 
  $noop: log('No operator found in `#{$expression}`.');
}


//
// Get dimension of an expression, based on a found operator
//
// @param {String} $expression - Expression to extract dimension from
// @param {String} $operator - Operator from `$expression`
//
// @return {String} - `width` or `height` (or potentially anything else)
//
@function get-expression-dimension($expression, $operator) {
  $operatorIndex: str-index($expression, $operator);
  $parsedDimension: str-slice($expression, 0, $operatorIndex - 1);
  $dimension: 'width';

  @if str-length($parsedDimension) > 0 {
    $dimension: $parsedDimension;
  }

  @return $dimension;
}


//
// Get dimension prefix based on an operator
//
// @param {String} $operator - Operator
//
// @return {String} - `min` or `max`
//
@function get-expression-prefix($operator) {
  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');
}


//
// Get value of an expression, based on a found operator
//
// @param {String} $expression - Expression to extract value from
// @param {String} $operator - Operator from `$expression`
//
// @return {Number} - A numeric value
//
@function get-expression-value($expression, $operator) {
  $operatorIndex: str-index($expression, $operator);
  $value: str-slice($expression, $operatorIndex + str-length($operator));

  @if map-has-key($breakpoints, $value) {
    $value: map-get($breakpoints, $value);
  }
  @else {
    $value: to-number($value);
  }

  $interval: map-get($unitIntervals, unit($value));

  @if not $interval {
    // It is not possible to include a mixin inside a function, so we have to
    // rely on the `log(..)` function rather than the `log(..)` mixin. Because
    // functions cannot be called anywhere in Sass, we need to hack the call in
    // a dummy variable, such as `$noop`. If anybody ever raise a scoping issue with
    // Sass 3.3, change this line in `@if log(..) {}` instead.
    $noop: log('Unknown unit `#{unit($value)}`.');
  }

  @if $operator == '>' {
    $value: $value + $interval;
  }
  @else if $operator == '<' {
    $value: $value - $interval;
  }

  @return $value;
}


//
// Parse an expression to return a valid media-query expression
//
// @param {String} $expression - Expression to parse
//
// @return {String} - Valid media query
//
@function parse-expression($expression) {
  // If it is part of $mediaExpressions, it has no operator
  // then there is no need to go any further, just return the value
  @if map-has-key($mediaExpressions, $expression) {
    @return map-get($mediaExpressions, $expression);
  }

  $operator: get-expression-operator($expression);
  $dimension: get-expression-dimension($expression, $operator);
  $prefix: get-expression-prefix($operator);
  $value: get-expression-value($expression, $operator);

  @return '(#{$prefix}-#{$dimension}: #{$value})';
}

//
// Slice `$list` between `$start` and `$end` indexes
//
// @access private
//
// @param {List} $list - List to slice
// @param {Number} $start [1] - Start index
// @param {Number} $end [length($list)] - End index
//
// @return {List} Sliced list
//
@function slice($list, $start: 1, $end: length($list)) {
  @if length($list) < 1 or $start > $end {
    @return ();
  }

  $result: ();

  @for $i from $start through $end {
    $result: append($result, nth($list, $i));
  }

  @return $result;
}



//
// Casts a string into a number
//
// @param {String | Number} $value - Value to be parsed
//
// @return {Number}
//
@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  }
  @else if type-of($value) != 'string' {
    $noop: log('Value for `to-number` should be a number or a string.');
  }

  $firstCharacter: str-slice($value, 1, 1);
  $result: 0;
  $digits: 0;
  $minus: ($firstCharacter == '-');
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  // Remove +/- sign if present at first character
  @if ($firstCharacter == '+' or $firstCharacter == '-') {
    $value: str-slice($value, 2);
  }

  @for $i from 1 through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i));
    }

    @if $character == '.' {
      $digits: 1;
    }
    @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    }
    @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}


//
// Add `$unit` to `$value`
//
// @param {Number} $value - Value to add unit to
// @param {String} $unit - String representation of the unit
//
// @return {Number} - `$value` expressed in `$unit`
//
@function to-length($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

  @if not index(map-keys($units), $unit) {
    $noop: log('Invalid unit `#{$unit}`.');
  }

  @return $value * map-get($units, $unit);
}

//
// This mixin aims at redefining the configuration just for the scope of
// the call. It is helpful when having a component needing an extended
// configuration such as custom breakpoints (referred to as tweakpoints)
// for instance.
//
// @author Hugo Giraudel
//
// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`
// @param {Map} $tweakMediaExpressions [()] - Map of tweaked media expressions to be merged with `$media-expression`
//
// @example scss - Extend the global breakpoints with a tweakpoint
//  @include media-context(('custom': rem-size(678))) {
//    .foo {
//      @include media('>phone', '<=custom') {
//       // ...
//      }
//    }
//  }
//
// @example scss - Extend the global media expressions with a custom one
//  @include media-context($tweakMediaExpressions: ('all': 'all')) {
//    .foo {
//      @include media('all', '>phone') {
//       // ...
//      }
//    }
//  }
//
// @example scss - Extend both configuration maps
//  @include media-context(('custom': rem-size(678)), ('all': 'all')) {
//    .foo {
//      @include media('all', '>phone', '<=custom') {
//       // ...
//      }
//    }
//  }
//
@mixin media-context($tweakpoints: (), $tweakMediaExpressions: ()) {
  // Save global configuration
  $globalBreakpoints: $breakpoints;
  $globalMediaExpressions: $mediaExpressions;

  // Update global configuration
  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;
  $mediaExpressions: map-merge($mediaExpressions, $tweakMediaExpressions) !global;

  @content;

  // Restore global configuration
  $breakpoints: $globalBreakpoints !global;
  $mediaExpressions: $globalMediaExpressions !global;
}

//
// include-media public exposed API
// @access public
//

//
// Generates a media query based on a list of conditions
//
// @param {Arglist}   $conditions  - Media query conditions
//
// @example scss - With a single set breakpoint
//  @include media('>phone') { }
//
// @example scss - With two set breakpoints
//  @include media('>phone', '<=tablet') { }
//
// @example scss - With custom values
//  @include media('>=rem-size(358)', '<rem-size(850)') { }
//
// @example scss - With set breakpoints with custom values
//  @include media('>desktop', '<=rem-size(1350)') { }
//
// @example scss - With a static expression
//  @include media('retina2x') { }
//
// @example scss - Mixing everything
//  @include media('>=rem-size(350)', '<tablet', 'retina3x') { }
//
// need to target anchor
@mixin media($conditions...) {
  @if ($imMediaSupport and length($conditions) == 0) or
    (not $imMediaSupport and im-intercepts-static-breakpoint($conditions...)) {
    @content;
  }
  @else if ($imMediaSupport and length($conditions) > 0) {
    @media #{unquote(parse-expression(nth($conditions, 1)))} {
      // Recursive call
      @include media(slice($conditions, 2)...) {
        @content;
      }
    }
  }
}
