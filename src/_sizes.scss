@import 'rem-size';

/* This and _sizes are only place we have px values */
/* stylelint-disable unit-whitelist */
$baseSpacingSize: 8px;

/**
  Base spacing multiplier
  Multiplies given value with $baseSpacingSize
  Basically snaps any value to grid.
  @param value {number}
  @param gridSpacing {number}
 */
@function base-spacing($value, $gridSpacing: $baseSpacingSize) {
  $value: $value * $gridSpacing;
  @if ($value == 0) {
    $value: 0;
  }
  @return $value;
}

/**
  Sizing function
  Multiplies one or more values given with $baseSpacingSize
  Translates return value to REM size.
  @param value {number} multiple values allowed
 */
@function size($value) {
  $max: length($value);

  @if $max == 1 {
    // Pretty sure this is correct!
    // scss-lint:disable NameFormat
    @if type_of($value) != 'number' {
      @error "please pass a number to size()";
    }
    @if round($value) != $value {
      @error "please pass a round number to size(). For other sizes, please create a custom size variable";
    }
    $gridSpacing: $value * $baseSpacingSize;
    @return rem-size($gridSpacing);
  }

  @if $max > 1 {
    $gridSpacings: ();

    @for $i from 1 through $max {
      $gridSpacings: append($gridSpacings, base-spacing(nth($value, $i)));
    }

    @return rem-size($gridSpacings);
  }
}
